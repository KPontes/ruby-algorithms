
<div class="container">
    <h1> Lista de algoritmos</h1>
    
    BinGap(2595): <%= binary_gap(2595) %> <br>
    cyclic_rotation(A = [3, 8, 9, 7, 6] and K = 3): <%= cyclic_rotation([3, 8, 9, 7, 6],3) %> <br>
    odd_ocurrences_in_array(a): <%= odd_ocurrences_in_array([9,3,9,3,9,7,9]) %>  <br>
    perm_missing_element(a): <%= perm_missing_element([2,3,1,5]) %>  <br>
    frog_jump: <%= frog_jump(10, 85, 30) %>  <br>
    tape_equilibrium: <%= tape_equilibrium([3,1,2,4,3]) %> <br>
    missingInteger: <%= missingInteger([1, 3, 6, 4, 1, 2]) %> <br>
    permCheck: <%= permCheck([1, 4, 3, 5]) %> <br>  
    frogRiverOne: <%= frogRiverOne(5, [1,3, 1, 4, 2, 3, 5, 4]) %> <br>  
    MaxCounter: <%= maxCounter(5, [3,4,4,6,1,4,4]) %> <br>  
    CountDiv: <%= countDiv(6, 11, 2) %> <br> 
    PassingCars: <%= passingCars([0,1,0,1,1], 5) %> <br> 
    GenomicRangeQuery: <%= genomicRangeQuery("CAGCCTA", [2,5,0], [4,5,6]) %> <br> 
    Distinct: <%= distinct([2,1,1,2,3,1], 6) %> <br> 
    Triangle: <%= triangle([10,2,5,1,8,20], 6) %> <br> 
    NumberOfDiscIntersections: <%= numberOfDiscIntersections([1,5,2,1,4,0], 6) %> <br> 
    Stonewall: <%= stonewall([8,8,5,7,9,8,7,4,8], 9) %> <br> 
    Brackets: <%= brackets("{[()()]}") %> <br> 
    Brackets: <%= brackets("([)()]") %> <br> 
    Brackets: <%= brackets("{{{{[") %> <br>
    Fish: <%= fish([4,3,2,1,5], [0,1,0,0,0], 5) %> <br> 
    Fish: <%= fish([4,3,2,1,5,6,7,8], [0,1,0,0,0,1,0,0], 8) %> <br>
    Fish: <%= fish([4,3,2], [0,0,0], 3) %> <br>
    Dominator: <%= dominator([3,4,3,2,3,-1,3,3], 8) %> <br>
    MaxProfit: <%= maxprofit([23171,21011,21123,21366,21013,21367],6) %> <br>
    MaxSlice: <%= maxslicesum([3,2,-6,4,0],5) %> <br>
    Countfactors(120): <%= countfactors(120) %> <br>
    Flags: <%= flags([1,5,3,4,3,4,1,2,3,4,6,2]) %> <br>
    Countsemiprimes: <%= countsemiprimes(26,[1,4,16],[26,10,20]) %> <br>
    Countnondivisible: <%= countnondivisible([3,1,2,3,6], 5) %> <br>
    Chocolatesbynumbers: <%= chocolatesbynumbers(10, 4) %> <br>
    Commonprimedivisors: <%= commonprimedivisors([3, 9, 20, 11], [9, 81, 5, 13], 4) %> <br>
    Absdistinct: <%= absdistinct([-5,-3,-1,0,3,6], 6) %> <br>
    Counttriangles: <%= counttriangles([10,2,5,1,8,12], 6) %> <br>
    Runbintree: <%= runbintree([10,11,9,5,7,18,17]) %> <br>
    Findallfactors: <%= findallfactors(36) %> <br>
    Decimaltobinary: <%= decimaltobinary(125) %> <br>
    Sieveprimes: <%= sieveprimes(25) %> <br>
    Generatefibonacci: <%= generatefibonacci(9) %> <br>
    Binarysearch: <%= binarysearch([2,5,8,10,15,23,35,44,48,52,61,67,77],67) %> <br>
    LongestPalSubstr: <%= longestPalSubstr("forgeeksskeegfor") %> <br>
    AnagramStrSearch: <%= anagramStrSearch("BACDGABCDA", "ABCD") %> <br>
    MergeSort: <%= mergeSort([12, 11, 13, 5, 6, 7],0,5) %> <br>
    LCS: <%= lcs("AGGTAB", "GXTXAYB") %> <br>
    PositiveOpposite: <%= positiveopposite([-7, 4, -3, 2, 2, -8, -2, 3, 3, 7, -2, 3, -2]) %> <br>
    minimumjumps: <%= minimumjumps([1, 3, 6, 1, 0, 9], 6) %> <br>
    BuildlinkedList: <%= buildlinkedList %> <br>
    Partition: <%= partition([10,7,8,9,1,5],0,5) %> <br>
    Quicksort: <%= quickSort([2,10,7,8,9,1,5,12,15,3],0,9) %> <br>
    MaximumSquareSize: <%= maximumSquareSize([[0, 1, 1, 0, 1], [1, 1, 0, 1, 0], [0, 1, 1, 1, 0], [1, 1, 1, 1, 0], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0]]) %> <br>

    <input type="button" id="js" value="Clique" stonewall="studycom()" >
    
</div>